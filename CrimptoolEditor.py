#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.9.9pre on Wed Aug 19 19:53:27 2020
#

import wx
import json
import os
from CrimptoolEditorGUI import CrimptoolEditorGUI

class CrimptoolEditor(CrimptoolEditorGUI):
    def __init__(self, parent, *args, **kwds):

        CrimptoolEditorGUI.__init__(self, parent, *args, **kwds)
        self.SetSize((591, 465))
        self.SetTitle("Crimptool")
        self.defEntry = "--Neue Zange--"
        self.crimptools = {}
        self.data_directory = os.getcwd()
        self.loadCrimpInfo()  # Create new file if it does not exist

        self.btnEdit.Bind(wx.EVT_BUTTON, self.onEditClicked)
        self.btnDelete.Bind(wx.EVT_BUTTON, self.onDeleteClicked)
        self.btnAddSlot.Bind(wx.EVT_BUTTON, self.onAddSlotClicked)
        self.btnDeleteSlot.Bind(wx.EVT_BUTTON, self.onDeleteSlotClicked)
        self.lbCrimpTools.Bind(wx.EVT_LISTBOX, self.onCrimpToolSelected)
        self.lcSlots.Bind(wx.EVT_LIST_ITEM_SELECTED, self.onSlotSelected)
        self.lcSlots.Bind(wx.EVT_LIST_ITEM_DESELECTED, self.onSlotSelected)

        self.tcID.Bind(wx.EVT_TEXT, self.onInfoChanged)
        self.tcProd.Bind(wx.EVT_TEXT, self.onInfoChanged)
        self.tcType.Bind(wx.EVT_TEXT, self.onInfoChanged)
        self.tcProdNr.Bind(wx.EVT_TEXT, self.onInfoChanged)
        self.tcCrimp.Bind(wx.EVT_TEXT, self.onInfoChanged)
        self.tcAWGSlot.Bind(wx.EVT_TEXT, self.onSlotChanged)
        self.tcMetSlot.Bind(wx.EVT_TEXT, self.onSlotChanged)

        self.fillCrimpToolBox()

    def onEditClicked(self, event):
        if self.btnEdit.GetLabel() == "Bearbeiten":
            self.enableInfoScreen()
            self.onInfoChanged(event)

        elif self.btnEdit.GetLabel() == "Speichern":
            infoscreen = {}
            infoscreen["ID"] = self.tcID.GetValue()
            infoscreen["Producer"] = self.tcProd.GetValue()
            infoscreen["Type"] = self.tcType.GetValue()
            infoscreen["ProducerNr"] = self.tcProdNr.GetValue()
            infoscreen["Crimp"] = self.tcCrimp.GetValue()

            rows = self.lcSlots.GetItemCount()
            slots = []
            for row in range(rows):
                awg = self.lcSlots.GetItem(itemIdx=row, col=0).GetText()
                met = self.lcSlots.GetItem(itemIdx=row, col=1).GetText()
                slots.append((awg, met))
            infoscreen["Slots"] = slots

            self.crimptools[infoscreen["ID"]] = infoscreen
            self.saveCrimpInfo()
            self.disableInfoScreen()
            self.fillCrimpToolBox()
            self.btnEdit.Disable()

    def onDeleteClicked(self, event):
        toolIdx = self.lbCrimpTools.GetSelection()
        selTool = self.lbCrimpTools.GetString(toolIdx)

        if selTool != self.defEntry:
            self.crimptools.pop(selTool)
            self.saveCrimpInfo()
            self.clearInfoScreen()
            self.fillCrimpToolBox()
            self.btnEdit.Disable()
            self.btnDelete.Disable()

    def onCrimpToolSelected(self, event):
        self.disableInfoScreen()

        toolIdx = self.lbCrimpTools.GetSelection()
        selTool = self.lbCrimpTools.GetString(toolIdx)
        if selTool == self.defEntry:
            self.enableInfoScreen()
            self.clearInfoScreen()
            self.btnEdit.SetLabel("Speichern")
            self.btnDelete.Disable()
            return

        elif toolIdx != -1:
            self.clearInfoScreen()
            infoscreen = self.crimptools[selTool]
            self.tcID.SetValue(infoscreen["ID"])
            self.tcProd.SetValue(infoscreen["Producer"])
            self.tcType.SetValue(infoscreen["Type"])
            self.tcProdNr.SetValue(infoscreen["ProducerNr"])
            self.tcCrimp.SetValue(infoscreen["Crimp"])
            for slot in infoscreen["Slots"]:
                self.lcSlots.Append(slot)
            self.btnEdit.Enable()
            self.btnDelete.Enable()

    def onAddSlotClicked(self, event):
        self.lcSlots.Append([self.tcAWGSlot.GetValue(),
                             self.tcMetSlot.GetValue()])

        self.tcAWGSlot.SetValue("")
        self.tcMetSlot.SetValue("")
        self.onInfoChanged(event)

    def onSlotSelected(self, event):
        slotIdx = self.lcSlots.GetFirstSelected()
        if slotIdx == -1:
            self.btnDeleteSlot.Disable()
            return
        self.btnDeleteSlot.Enable()

    def onDeleteSlotClicked(self, event):
        slotIdx = self.lcSlots.GetFirstSelected()
        self.lcSlots.DeleteItem(slotIdx)

        self.onSlotSelected(event)
        self.onInfoChanged(event)

    def onInfoChanged(self, event):
        infoscreen = {}
        infoscreen["ID"] = self.tcID.GetValue()
        infoscreen["Producer"] = self.tcProd.GetValue()
        infoscreen["Type"] = self.tcType.GetValue()
        infoscreen["ProducerNr"] = self.tcProdNr.GetValue()
        infoscreen["Crimp"] = self.tcCrimp.GetValue()

        completeInfo = []
        for k in infoscreen.keys():
            completeInfo.append(infoscreen[k] != "")

        completeInfo.append(self.lcSlots.GetItemCount() > 0)

        if all(completeInfo):
            self.btnEdit.SetLabel("Speichern")
            self.btnEdit.Enable()
        else:
            self.btnEdit.SetLabel("Bearbeiten")
            self.btnEdit.Disable()

    def onSlotChanged(self, event):
        if self.tcAWGSlot.GetValue() != "" or self.tcMetSlot.GetValue() != "":
            self.btnAddSlot.Enable()
        else:
            self.btnAddSlot.Disable()

    def disableInfoScreen(self):
        self.btnEdit.SetLabel("Bearbeiten")
        self.tcID.Disable()
        self.tcProd.Disable()
        self.tcType.Disable()
        self.tcProdNr.Disable()
        self.tcCrimp.Disable()
        self.tcAWGSlot.Disable()
        self.tcMetSlot.Disable()
        self.lcSlots.Disable()

    def enableInfoScreen(self):
        self.btnEdit.SetLabel("Speichern")
        self.tcID.Enable()
        self.tcProd.Enable()
        self.tcType.Enable()
        self.tcProdNr.Enable()
        self.tcCrimp.Enable()
        self.tcAWGSlot.Enable()
        self.tcMetSlot.Enable()
        self.lcSlots.Enable()

    def clearInfoScreen(self):
        self.tcID.Clear()
        self.tcProd.Clear()
        self.tcType.Clear()
        self.tcProdNr.Clear()
        self.tcCrimp.Clear()
        self.tcAWGSlot.Clear()
        self.tcMetSlot.Clear()
        self.lcSlots.DeleteAllItems()

    def loadCrimpInfo(self):
        outfile = os.path.join(self.data_directory, "crimptools.json")
        if not os.path.exists(outfile):
            with open(outfile, "w") as FSO:
                json.dump({}, FSO)
            self.crimptools = {}
        else:
            with open(outfile, "r") as FSO:
                self.crimptools = json.load(FSO)

    def saveCrimpInfo(self):
        outfile = os.path.join(self.data_directory, "crimptools.json")
        if os.path.exists(outfile):
            with open(outfile, "w") as FSO:
                json.dump(self.crimptools, FSO)

    def fillCrimpToolBox(self):
        self.lbCrimpTools.Clear()
        self.lbCrimpTools.Append(self.defEntry)

        crimptools = list(self.crimptools.keys())
        crimptools.sort()
        for k in crimptools:
            self.lbCrimpTools.Append(k)


class Crimptool(wx.App):
    def OnInit(self):
        self.Crimptool = CrimptoolEditor(None, wx.ID_ANY, "")
        self.SetTopWindow(self.Crimptool)
        self.Crimptool.Show()
        return True


if __name__ == "__main__":
    app = Crimptool(0)
    app.MainLoop()
